package day1
/*
一个完整的括号字符定义规则如下：
1. 空字符串是完整的
2. 如果s是完整的字符串，那么（s）也是完整的
3. 如果s和t是完整的字符串，将它们连接起来形成的st也是完整的
例如“(()())”，“”和“(())()”是完整的括号字符串，“())(”，“()(”和“)”是不完整的括号字符串
你有一个括号字符串s，现在需要在其中任意位置添加最少的括号，将其转换为完整的括号字符串。请问你最少需要添加多少个括号？
*/

func bracket(s string)int{
	if s == ""{
		return 0
	}
	res := 0
	status := 0 // 代表左括号的个数减去右括号的个数
	for i := 0; i < len(s); i++{
		if s[i] == '('{
			status++
		}else{
			status--
		}
		if status < 0{ // 需要添加左括号
			res++
			status = 0
		}
	}
	res += status // 需要添加右括号
	return res
}